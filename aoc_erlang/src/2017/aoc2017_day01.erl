-module(aoc2017_day01).

-behavior(aoc_puzzle).

-export([parse/1, solve1/1, solve2/1, info/0]).

-include("aoc_puzzle.hrl").

-spec info() -> aoc_puzzle().
info() ->
    #aoc_puzzle{module = ?MODULE,
                year = 2017,
                day = 1,
                name = "Inverse Captcha",
                expected = {1102, 1076},
                has_input_file = false}.

-type input_type() :: string().
-type result1_type() :: integer().
-type result2_type() :: result1_type().

-spec parse(Input :: binary()) -> input_type().
parse(_Input) ->
    "34997744892914653296827871613388552993634935173733597474997393431324"
    "12171894248467449213373648661951524682924847783654445194393883284815"
    "71992241165637156461264314935637721127147415466357646655864528583493"
    "26658345524573681224829221829772728531278893357146638772291782796744"
    "81247959517257855593196828532674119155873549192368258684418547658412"
    "46778568566125822632631247159164982546597613122252959473286718737295"
    "94182695425852559718922816832816341259695766322357565252335851264933"
    "47155535153636394457276362176148994421778778556435513175694833141365"
    "26468116267421688576348562343474326989313717574541563964329934217956"
    "75147273229642441888776517165375965288923515378871773449714189311167"
    "84978851947927417261733437841266157488515698817153248338552834285135"
    "85997921543318893429851685281865628737361171132422718633188739173554"
    "28393173152783223727362282169982597123525671895452937118687191281382"
    "94933593717332386261817228425474193586596387735947712618887948191114"
    "88274537815467894373175815689314452599125412733533452541712525883446"
    "12386649134562638758915336976347291218848744548755462493981871543949"
    "69733173557724365872211137155236317958454352114994424784817679357185"
    "51643294151437534792978799269591415976951746743864678547764816893146"
    "12324534729187335368471697738925271618243312864656442299938886755679"
    "99656829749896565165233796183787646859674943345463397572256197193545"
    "95549797133443132925114472889393793692794872995573261377982196463954"
    "36241742751581363752896833892713543627966633788455384129347637693559"
    "71317447726291491659899182398368622637839634155421954468343953693333"
    "81857238327439642583351639933241915892463995358454341678191354139164"
    "43764931668386817282279877264296262823999224943974974489892778799656"
    "72345384913919494836899899553126122466947855935968916793462468162283"
    "49312237283182478321347585818827364153341875623423751446933987712231"
    "27132562692525629392889723242374746911936313136382354858767169452656"
    "22451912828789926483146359766346185711913231257864889481541734836453"
    "23728366216441762957769789427837147789548647195418321766338921478456"
    "93752248565147794357864859961462918847471158244516279178346514129117"
    "328285132341339595664283".

-spec solve1(Input :: input_type()) -> result1_type().
solve1(Input) ->
    captcha(Input).

-spec solve2(Input :: input_type()) -> result2_type().
solve2(Input) ->
    captcha2(Input).

char_to_int(X) ->
    X - $0.

-spec captcha(string(), integer(), integer()) -> integer().
captcha([X], X, Acc) ->
    char_to_int(X) + Acc;
captcha([_], _, Acc) ->
    Acc;
captcha([X, X | Xs], First, Acc) ->
    captcha([X | Xs], First, Acc + char_to_int(X));
captcha([_, Y | Xs], First, Acc) ->
    captcha([Y | Xs], First, Acc).

-spec captcha(string()) -> integer().
captcha(S = [X | _]) ->
    captcha(S, X, 0).

sum_of_matching_elements([], [], Acc) ->
    Acc;
sum_of_matching_elements([X | Xs], [X | Ys], Acc) ->
    sum_of_matching_elements(Xs, Ys, Acc + char_to_int(X));
sum_of_matching_elements([_ | Xs], [_ | Ys], Acc) ->
    sum_of_matching_elements(Xs, Ys, Acc).

-spec captcha2(string()) -> integer().
captcha2(X) ->
    %% Split X into two equal length lists.
    {A, B} = lists:split(length(X) bsr 1, X),
    %% Compute the sum of all digits which matches the digit at the
    %% same location in the other list.
    Sum = sum_of_matching_elements(A, B, 0),
    %% Multiply by 2, since each matching digit will match twice.
    Sum * 2.
